---
openapi: 3.0.0
info:
  title: Swagger Fidelity cards
  description: CC 2021 Barsan Alexandru, Stafie Stefan
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0-oas3
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/alexbarsan944/CloudComputing101/1.0.0
- url: http://virtserver.swaggerhub.com/alexbarsan944/CloudComputing101/1.0.0
paths:
  /cards:
    post:
      tags:
      - Cards
      summary: Get cards
      operationId: getCards
      requestBody:
        description: Got card object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
        required: true
      responses:
        default:
          description: successful operation
  /cards/{cardId}:
    get:
      tags:
      - Cards
      summary: Get card
      operationId: getCardData
      parameters:
      - name: cardId
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          maximum: 9999999999
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: Card found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        "404":
          description: Card not found
  /cards/{cardId}/discounts:
    get:
      tags:
      - Cards
      summary: Get the discounts available for card
      operationId: getCardDiscounts
      parameters:
      - name: cardId
        in: path
        description: card ID
        required: true
        style: simple
        explode: false
        schema:
          maximum: 9999999999
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: Card found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountsData'
        "404":
          description: Card not found
    post:
      tags:
      - Cards
      summary: assign discount to card
      description: The operation of adding a discount to a card
      operationId: assignDiscount
      parameters:
      - name: cardId
        in: path
        description: card ID
        required: true
        style: simple
        explode: false
        schema:
          maximum: 9999999999
          minimum: 1
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscountId'
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid parameters
        "404":
          description: Card not found
  /login:
    post:
      tags:
      - user
      summary: Login user
      description: Log in user to use application.
      operationId: login
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        default:
          description: successful operation
  /logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /register:
    post:
      tags:
      - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /users/{userId}:
    get:
      tags:
      - user
      summary: Create user
      operationId: getUserData
      parameters:
      - name: userId
        in: path
        description: User ID
        required: true
        style: simple
        explode: false
        schema:
          maximum: 9999999999
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
    patch:
      tags:
      - user
      summary: update user information
      operationId: updateUserById
      parameters:
      - name: userId
        in: path
        description: the user that is modified
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: query
        description: the name of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: email
        in: query
        description: the email of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: the password of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: age
        in: query
        description: the age of the user
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid parameters supplied
        "404":
          description: User not found
  /discounts/{discountId}:
    get:
      tags:
      - discounts
      summary: get a discount
      operationId: getDiscountById
      parameters:
      - name: discountId
        in: path
        description: the discount that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
        "400":
          description: Invalid id supplied
        "404":
          description: Discount not found
    delete:
      tags:
      - discounts
      summary: Delete discount
      description: Done after the discount time is elapsed
      operationId: deleteDiscount
      parameters:
      - name: discountId
        in: path
        description: The discount that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Done
        "404":
          description: Discount not found
    patch:
      tags:
      - discounts
      summary: update a discount
      operationId: updateDiscountById
      parameters:
      - name: discountId
        in: path
        description: the discount that is modified
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: endTime
        in: query
        description: the ending of the discount period
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: code
        in: query
        description: the discount code
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid parameters supplied
        "404":
          description: Discount not found
  /discounts:
    post:
      tags:
      - discounts
      summary: create discount
      description: The operation of creating a new discount
      operationId: createDiscount
      requestBody:
        description: Got card object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscountInfo'
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid parameters
  /shops/{shopId}:
    get:
      tags:
      - shops
      summary: get information about shop
      operationId: getShopById
      parameters:
      - name: shopId
        in: path
        description: the shop that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopInfo'
        "400":
          description: Invalid id supplied
        "404":
          description: Shop not found
    delete:
      tags:
      - shops
      summary: Delete shop
      description: delete a certain shop
      operationId: deleteShop
      parameters:
      - name: shopId
        in: path
        description: The shop that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "404":
          description: Shop not found
        "200":
          description: Done
    patch:
      tags:
      - shops
      summary: update a discount
      operationId: updateShopById
      parameters:
      - name: shopId
        in: path
        description: the shop that is modified
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: endTime
        in: query
        description: The name of the shop
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid parameters supplied
        "404":
          description: Shop not found
  /shops:
    post:
      tags:
      - shops
      summary: create shop
      description: The operation of creating a new shop
      operationId: createShop
      requestBody:
        description: Get shop object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopInfo'
        required: true
      responses:
        default:
          description: Successful operation
        "400":
          description: Invalid parameters
components:
  schemas:
    ShopInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    DiscountId:
      type: object
      properties:
        id:
          type: integer
          format: int64
    DiscountInfo:
      type: object
      properties:
        codPromo:
          type: integer
          format: int64
        idMagazin:
          type: integer
    DiscountsData:
      type: object
      properties:
        id:
          type: integer
          format: int64
        shopId:
          type: integer
          format: int64
        code:
          type: integer
          format: int32
    Discount:
      type: object
      properties:
        id:
          type: integer
          format: int64
        shopId:
          type: integer
          format: int64
        code:
          type: integer
          format: int32
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        age:
          type: integer
      xml:
        name: User
    Card:
      required:
      - cardId
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        idClient:
          type: integer
          format: int64
        name:
          type: string
          example: Kaufland
        points:
          type: integer
          format: int64
          example: 128
      xml:
        name: Card
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
