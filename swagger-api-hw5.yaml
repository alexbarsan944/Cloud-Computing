openapi: 3.0.0
info:
  description: |
    This is a sample Petstore server.  You can find 
    out more about Swagger at 
    [http://swagger.io](http://swagger.io) or on 
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: 1.0.0-oas3
  title: Swagger Petstore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /cards:
    post:
      tags:
        - Card
      summary: Get cards
      operationId: getCards
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
        description: Got card object
        required: true
      responses:
        default:
          description: successful operation
  '/cards/{cardId}':
    get:
      tags:
        - Card
      summary: Get card
      operationId: getCardData
      parameters:
        - name: cardId
          in: path
          description: User ID 
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 9999999999
      responses:
        '200':
          description: Card found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '404':
          description: Card not found
  /login:
    post:
      tags:
        - user
      summary: Login user
      description: Log in user to use application.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
  /logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /register:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
  '/users/{userId}':
    get:
      tags:
        - user
      summary: Create user
      operationId: getUserData
      parameters:
        - name: userId
          in: path
          description: User ID 
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 9999999999
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://virtserver.swaggerhub.com/alexbarsan944/CloudComputing101/1.0.0'
  - url: 'http://virtserver.swaggerhub.com/alexbarsan944/CloudComputing101/1.0.0'
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        age:
          type: integer
      xml:
        name: User
    Card:
      type: object
      required:
        - name
        - cardId
      properties:
        id:
          type: integer
          format: int64
        idClient:
          type: integer
          format: int64
        name:
          type: string
          example: Kaufland
        points:
          type: integer
          format: int64
          example: 128
      xml:
        name: Card
